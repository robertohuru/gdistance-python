# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _core
else:
    import _core

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _core.delete_SwigPyIterator

    def value(self):
        return _core.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _core.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _core.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _core.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _core.SwigPyIterator_equal(self, x)

    def copy(self):
        return _core.SwigPyIterator_copy(self)

    def next(self):
        return _core.SwigPyIterator_next(self)

    def __next__(self):
        return _core.SwigPyIterator___next__(self)

    def previous(self):
        return _core.SwigPyIterator_previous(self)

    def advance(self, n):
        return _core.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _core.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _core.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _core.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _core.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _core.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _core.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _core:
_core.SwigPyIterator_swigregister(SwigPyIterator)

class PairIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _core.PairIntInt_swiginit(self, _core.new_PairIntInt(*args))
    first = property(_core.PairIntInt_first_get, _core.PairIntInt_first_set)
    second = property(_core.PairIntInt_second_get, _core.PairIntInt_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _core.delete_PairIntInt

# Register PairIntInt in _core:
_core.PairIntInt_swigregister(PairIntInt)

class PairFloatInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _core.PairFloatInt_swiginit(self, _core.new_PairFloatInt(*args))
    first = property(_core.PairFloatInt_first_get, _core.PairFloatInt_first_set)
    second = property(_core.PairFloatInt_second_get, _core.PairFloatInt_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _core.delete_PairFloatInt

# Register PairFloatInt in _core:
_core.PairFloatInt_swigregister(PairFloatInt)

class VecFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VecFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VecFloat___nonzero__(self)

    def __bool__(self):
        return _core.VecFloat___bool__(self)

    def __len__(self):
        return _core.VecFloat___len__(self)

    def __getslice__(self, i, j):
        return _core.VecFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VecFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VecFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VecFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VecFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VecFloat___setitem__(self, *args)

    def pop(self):
        return _core.VecFloat_pop(self)

    def append(self, x):
        return _core.VecFloat_append(self, x)

    def empty(self):
        return _core.VecFloat_empty(self)

    def size(self):
        return _core.VecFloat_size(self)

    def swap(self, v):
        return _core.VecFloat_swap(self, v)

    def begin(self):
        return _core.VecFloat_begin(self)

    def end(self):
        return _core.VecFloat_end(self)

    def rbegin(self):
        return _core.VecFloat_rbegin(self)

    def rend(self):
        return _core.VecFloat_rend(self)

    def clear(self):
        return _core.VecFloat_clear(self)

    def get_allocator(self):
        return _core.VecFloat_get_allocator(self)

    def pop_back(self):
        return _core.VecFloat_pop_back(self)

    def erase(self, *args):
        return _core.VecFloat_erase(self, *args)

    def __init__(self, *args):
        _core.VecFloat_swiginit(self, _core.new_VecFloat(*args))

    def push_back(self, x):
        return _core.VecFloat_push_back(self, x)

    def front(self):
        return _core.VecFloat_front(self)

    def back(self):
        return _core.VecFloat_back(self)

    def assign(self, n, x):
        return _core.VecFloat_assign(self, n, x)

    def resize(self, *args):
        return _core.VecFloat_resize(self, *args)

    def insert(self, *args):
        return _core.VecFloat_insert(self, *args)

    def reserve(self, n):
        return _core.VecFloat_reserve(self, n)

    def capacity(self):
        return _core.VecFloat_capacity(self)
    __swig_destroy__ = _core.delete_VecFloat

# Register VecFloat in _core:
_core.VecFloat_swigregister(VecFloat)

class VecInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VecInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VecInt___nonzero__(self)

    def __bool__(self):
        return _core.VecInt___bool__(self)

    def __len__(self):
        return _core.VecInt___len__(self)

    def __getslice__(self, i, j):
        return _core.VecInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VecInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VecInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VecInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VecInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VecInt___setitem__(self, *args)

    def pop(self):
        return _core.VecInt_pop(self)

    def append(self, x):
        return _core.VecInt_append(self, x)

    def empty(self):
        return _core.VecInt_empty(self)

    def size(self):
        return _core.VecInt_size(self)

    def swap(self, v):
        return _core.VecInt_swap(self, v)

    def begin(self):
        return _core.VecInt_begin(self)

    def end(self):
        return _core.VecInt_end(self)

    def rbegin(self):
        return _core.VecInt_rbegin(self)

    def rend(self):
        return _core.VecInt_rend(self)

    def clear(self):
        return _core.VecInt_clear(self)

    def get_allocator(self):
        return _core.VecInt_get_allocator(self)

    def pop_back(self):
        return _core.VecInt_pop_back(self)

    def erase(self, *args):
        return _core.VecInt_erase(self, *args)

    def __init__(self, *args):
        _core.VecInt_swiginit(self, _core.new_VecInt(*args))

    def push_back(self, x):
        return _core.VecInt_push_back(self, x)

    def front(self):
        return _core.VecInt_front(self)

    def back(self):
        return _core.VecInt_back(self)

    def assign(self, n, x):
        return _core.VecInt_assign(self, n, x)

    def resize(self, *args):
        return _core.VecInt_resize(self, *args)

    def insert(self, *args):
        return _core.VecInt_insert(self, *args)

    def reserve(self, n):
        return _core.VecInt_reserve(self, n)

    def capacity(self):
        return _core.VecInt_capacity(self)
    __swig_destroy__ = _core.delete_VecInt

# Register VecInt in _core:
_core.VecInt_swigregister(VecInt)

class VecBool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VecBool_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VecBool___nonzero__(self)

    def __bool__(self):
        return _core.VecBool___bool__(self)

    def __len__(self):
        return _core.VecBool___len__(self)

    def __getslice__(self, i, j):
        return _core.VecBool___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VecBool___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VecBool___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VecBool___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VecBool___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VecBool___setitem__(self, *args)

    def pop(self):
        return _core.VecBool_pop(self)

    def append(self, x):
        return _core.VecBool_append(self, x)

    def empty(self):
        return _core.VecBool_empty(self)

    def size(self):
        return _core.VecBool_size(self)

    def swap(self, v):
        return _core.VecBool_swap(self, v)

    def begin(self):
        return _core.VecBool_begin(self)

    def end(self):
        return _core.VecBool_end(self)

    def rbegin(self):
        return _core.VecBool_rbegin(self)

    def rend(self):
        return _core.VecBool_rend(self)

    def clear(self):
        return _core.VecBool_clear(self)

    def get_allocator(self):
        return _core.VecBool_get_allocator(self)

    def pop_back(self):
        return _core.VecBool_pop_back(self)

    def erase(self, *args):
        return _core.VecBool_erase(self, *args)

    def __init__(self, *args):
        _core.VecBool_swiginit(self, _core.new_VecBool(*args))

    def push_back(self, x):
        return _core.VecBool_push_back(self, x)

    def front(self):
        return _core.VecBool_front(self)

    def back(self):
        return _core.VecBool_back(self)

    def assign(self, n, x):
        return _core.VecBool_assign(self, n, x)

    def resize(self, *args):
        return _core.VecBool_resize(self, *args)

    def insert(self, *args):
        return _core.VecBool_insert(self, *args)

    def reserve(self, n):
        return _core.VecBool_reserve(self, n)

    def capacity(self):
        return _core.VecBool_capacity(self)
    __swig_destroy__ = _core.delete_VecBool

# Register VecBool in _core:
_core.VecBool_swigregister(VecBool)

class VecIntInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VecIntInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VecIntInt___nonzero__(self)

    def __bool__(self):
        return _core.VecIntInt___bool__(self)

    def __len__(self):
        return _core.VecIntInt___len__(self)

    def __getslice__(self, i, j):
        return _core.VecIntInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VecIntInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VecIntInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VecIntInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VecIntInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VecIntInt___setitem__(self, *args)

    def pop(self):
        return _core.VecIntInt_pop(self)

    def append(self, x):
        return _core.VecIntInt_append(self, x)

    def empty(self):
        return _core.VecIntInt_empty(self)

    def size(self):
        return _core.VecIntInt_size(self)

    def swap(self, v):
        return _core.VecIntInt_swap(self, v)

    def begin(self):
        return _core.VecIntInt_begin(self)

    def end(self):
        return _core.VecIntInt_end(self)

    def rbegin(self):
        return _core.VecIntInt_rbegin(self)

    def rend(self):
        return _core.VecIntInt_rend(self)

    def clear(self):
        return _core.VecIntInt_clear(self)

    def get_allocator(self):
        return _core.VecIntInt_get_allocator(self)

    def pop_back(self):
        return _core.VecIntInt_pop_back(self)

    def erase(self, *args):
        return _core.VecIntInt_erase(self, *args)

    def __init__(self, *args):
        _core.VecIntInt_swiginit(self, _core.new_VecIntInt(*args))

    def push_back(self, x):
        return _core.VecIntInt_push_back(self, x)

    def front(self):
        return _core.VecIntInt_front(self)

    def back(self):
        return _core.VecIntInt_back(self)

    def assign(self, n, x):
        return _core.VecIntInt_assign(self, n, x)

    def resize(self, *args):
        return _core.VecIntInt_resize(self, *args)

    def insert(self, *args):
        return _core.VecIntInt_insert(self, *args)

    def reserve(self, n):
        return _core.VecIntInt_reserve(self, n)

    def capacity(self):
        return _core.VecIntInt_capacity(self)
    __swig_destroy__ = _core.delete_VecIntInt

# Register VecIntInt in _core:
_core.VecIntInt_swigregister(VecIntInt)

class VecVecfloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VecVecfloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VecVecfloat___nonzero__(self)

    def __bool__(self):
        return _core.VecVecfloat___bool__(self)

    def __len__(self):
        return _core.VecVecfloat___len__(self)

    def __getslice__(self, i, j):
        return _core.VecVecfloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VecVecfloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VecVecfloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VecVecfloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VecVecfloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VecVecfloat___setitem__(self, *args)

    def pop(self):
        return _core.VecVecfloat_pop(self)

    def append(self, x):
        return _core.VecVecfloat_append(self, x)

    def empty(self):
        return _core.VecVecfloat_empty(self)

    def size(self):
        return _core.VecVecfloat_size(self)

    def swap(self, v):
        return _core.VecVecfloat_swap(self, v)

    def begin(self):
        return _core.VecVecfloat_begin(self)

    def end(self):
        return _core.VecVecfloat_end(self)

    def rbegin(self):
        return _core.VecVecfloat_rbegin(self)

    def rend(self):
        return _core.VecVecfloat_rend(self)

    def clear(self):
        return _core.VecVecfloat_clear(self)

    def get_allocator(self):
        return _core.VecVecfloat_get_allocator(self)

    def pop_back(self):
        return _core.VecVecfloat_pop_back(self)

    def erase(self, *args):
        return _core.VecVecfloat_erase(self, *args)

    def __init__(self, *args):
        _core.VecVecfloat_swiginit(self, _core.new_VecVecfloat(*args))

    def push_back(self, x):
        return _core.VecVecfloat_push_back(self, x)

    def front(self):
        return _core.VecVecfloat_front(self)

    def back(self):
        return _core.VecVecfloat_back(self)

    def assign(self, n, x):
        return _core.VecVecfloat_assign(self, n, x)

    def resize(self, *args):
        return _core.VecVecfloat_resize(self, *args)

    def insert(self, *args):
        return _core.VecVecfloat_insert(self, *args)

    def reserve(self, n):
        return _core.VecVecfloat_reserve(self, n)

    def capacity(self):
        return _core.VecVecfloat_capacity(self)
    __swig_destroy__ = _core.delete_VecVecfloat

# Register VecVecfloat in _core:
_core.VecVecfloat_swigregister(VecVecfloat)

class VecVecVecfloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _core.VecVecVecfloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _core.VecVecVecfloat___nonzero__(self)

    def __bool__(self):
        return _core.VecVecVecfloat___bool__(self)

    def __len__(self):
        return _core.VecVecVecfloat___len__(self)

    def __getslice__(self, i, j):
        return _core.VecVecVecfloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _core.VecVecVecfloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _core.VecVecVecfloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _core.VecVecVecfloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _core.VecVecVecfloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _core.VecVecVecfloat___setitem__(self, *args)

    def pop(self):
        return _core.VecVecVecfloat_pop(self)

    def append(self, x):
        return _core.VecVecVecfloat_append(self, x)

    def empty(self):
        return _core.VecVecVecfloat_empty(self)

    def size(self):
        return _core.VecVecVecfloat_size(self)

    def swap(self, v):
        return _core.VecVecVecfloat_swap(self, v)

    def begin(self):
        return _core.VecVecVecfloat_begin(self)

    def end(self):
        return _core.VecVecVecfloat_end(self)

    def rbegin(self):
        return _core.VecVecVecfloat_rbegin(self)

    def rend(self):
        return _core.VecVecVecfloat_rend(self)

    def clear(self):
        return _core.VecVecVecfloat_clear(self)

    def get_allocator(self):
        return _core.VecVecVecfloat_get_allocator(self)

    def pop_back(self):
        return _core.VecVecVecfloat_pop_back(self)

    def erase(self, *args):
        return _core.VecVecVecfloat_erase(self, *args)

    def __init__(self, *args):
        _core.VecVecVecfloat_swiginit(self, _core.new_VecVecVecfloat(*args))

    def push_back(self, x):
        return _core.VecVecVecfloat_push_back(self, x)

    def front(self):
        return _core.VecVecVecfloat_front(self)

    def back(self):
        return _core.VecVecVecfloat_back(self)

    def assign(self, n, x):
        return _core.VecVecVecfloat_assign(self, n, x)

    def resize(self, *args):
        return _core.VecVecVecfloat_resize(self, *args)

    def insert(self, *args):
        return _core.VecVecVecfloat_insert(self, *args)

    def reserve(self, n):
        return _core.VecVecVecfloat_reserve(self, n)

    def capacity(self):
        return _core.VecVecVecfloat_capacity(self)
    __swig_destroy__ = _core.delete_VecVecVecfloat

# Register VecVecVecfloat in _core:
_core.VecVecVecfloat_swigregister(VecVecVecfloat)


def distance(*args):
    return _core.distance(*args)

def acc_cost(*args):
    return _core.acc_cost(*args)


